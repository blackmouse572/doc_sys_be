generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  username               String                  @unique
  email                  String                  @unique
  password               String
  fullName               String?
  phoneNumber            String?
  avatar                 String?
  dob                    DateTime?
  homeTown               String?
  currentAddress         String?
  CID                    String?
  description            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  emailConfirmCode       String?
  emailConfirmed         Boolean                 @default(false)
  phoneNumberConfirmCode String?
  phoneNumberConfirmed   Boolean                 @default(false)
  resetPasswordCode      String?
  Document               Document[]
  DocumentReceiveDetail  DocumentReceiveDetail[]
  UserWorkPlaceDetails   UserWorkPlaceDetails[]
  User_Group             User_Group[]
}

model Department {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  UserWorkPlaceDetails UserWorkPlaceDetails[]
}

model Organization {
  id                   String                 @id @default(uuid())
  name                 String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  UserWorkPlaceDetails UserWorkPlaceDetails[]
}

model UserWorkPlaceDetails {
  id             String       @id @default(cuid())
  userId         String
  roleId         String
  departmentId   String
  organizationId String
  department     Department   @relation(fields: [departmentId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, roleId, departmentId, organizationId])
}

model Role {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  UserWorkPlaceDetails UserWorkPlaceDetails[]
}

model Group {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  level                Int                    @default(1)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  DocumentReceiveGroup DocumentReceiveGroup[]
  User_Group           User_Group[]
  Document             Document[]
}

model User_Group {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Document {
  id                    String                  @id @default(uuid())
  type                  DocType
  issueMark             IssueMarkType
  issuePublisherId      String
  description           String
  content               String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  dataAvailable         DateTime
  dateExpired           DateTime
  dateRelease           DateTime
  user                  User                    @relation(fields: [issuePublisherId], references: [id])
  DocumentReceiveDetail DocumentReceiveDetail[]
  Group                 Group?                  @relation(fields: [groupId], references: [id])
  groupId               String?
  DocumentReceiveGroup  DocumentReceiveGroup[]
}

model DocumentReceiveDetail {
  id           String   @id @default(uuid())
  documentId   String
  userId       String
  date_receive DateTime
  isRead       Boolean  @default(false)
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  document     Document @relation(fields: [documentId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, documentId])
}

model DocumentReceiveGroup {
  id           String   @id
  documentId   String
  groupId      String
  date_receive DateTime
  isRead       Boolean  @default(false)
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Document     Document @relation(fields: [documentId], references: [id])
  Group        Group    @relation(fields: [groupId], references: [id])

  @@unique([groupId, documentId])
}

enum RoleType {
  Bi_Thu
  Chu_Tich
  Can_Bo_Nhan_Vien
  Giam_Doc
  Giao_Vu
  Giang_Vien
  Hieu_Truong
  Pho_Giam_Doc_1
  Pho_Giam_Doc_2
  Pho_Khoa
  Pho_Trung_Tam
  Pho_Tong_Giam_Doc_2
  Pho_Tong_Giam_Doc_3
  Truong_Khoa
  Truong_Trung_Tam
  Tong_Giam_Doc
  Truong_Phong
}

enum DocType {
  Cong_Van
  Van_Ban
  Quyet_Dinh
  Thong_Bao
  Thong_Tu
  Nghien_Cuu
  Bao_Cao
  Tai_Lieu
  Khac
}

enum IssueMarkType {
  Ban_Giam_Doc
  Tong_Cong_Ty
  Ke_Toan_Tong_Cong_Ty
  Ban_Quan_Tri
  Ban_Ke_Toan
  Phong_Tong_Hop
}
